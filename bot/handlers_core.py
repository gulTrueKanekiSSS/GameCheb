import logging
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters.command import Command
from asgiref.sync import sync_to_async
from core.models import User, Quest, UserQuestProgress

logger = logging.getLogger(__name__)

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéØ –ü–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç")],
            [KeyboardButton(text="üéÅ –ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã")]
        ],
        resize_keyboard=True
    )

@sync_to_async
def get_or_create_user(telegram_id, name):
    return User.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={'name': name}
    )

@sync_to_async
def get_user(telegram_id):
    return User.objects.get(telegram_id=telegram_id)

@sync_to_async
def get_available_quest(user):
    return Quest.objects.filter(
        is_active=True
    ).exclude(
        userquestprogress__user=user
    ).first()

@sync_to_async
def save_user(user):
    user.save()

@sync_to_async
def get_completed(user):
    return list(UserQuestProgress.objects.filter(
        user=user,
        status=UserQuestProgress.Status.APPROVED,
        promo_code__isnull=False
    ).select_related('quest', 'promo_code'))

@sync_to_async
def create_progress(user, quest, file_id):
    return UserQuestProgress.objects.create(
        user=user,
        quest=quest,
        photo=file_id
    )


# === HANDLERS ===

async def cmd_start(message: types.Message):
    user, created = await get_or_create_user(
        telegram_id=message.from_user.id,
        name=message.from_user.full_name
    )

    if not user.is_verified:
        contact_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
            resize_keyboard=True
        )
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            reply_markup=contact_keyboard
        )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∫–≤–µ—Å—Ç–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )

async def handle_contact(message: types.Message):
    user = await get_user(message.from_user.id)
    user.phone_number = message.contact.phone_number
    user.is_verified = True
    await save_user(user)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–≤–µ—Å—Ç—ã.",
        reply_markup=get_main_keyboard()
    )

async def get_quest(message: types.Message):
    user = await get_user(message.from_user.id)

    if not user.is_verified:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    quest = await get_available_quest(user)
    if not quest:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤.")
        return

    await message.answer(
        f"üéØ –ö–≤–µ—Å—Ç: {quest.name}\n\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {quest.location}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{quest.description}\n\n"
        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ."
    )

    try:
        if quest.latitude and quest.longitude:
            await message.answer_location(
                latitude=float(quest.latitude),
                longitude=float(quest.longitude)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞—Ü–∏–∏: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É.")

async def my_promocodes(message: types.Message):
    user = await get_user(message.from_user.id)
    completed = await get_completed(user)

    if not completed:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
        return

    text = "–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n"
    for p in completed:
        text += f"üéÅ –ö–≤–µ—Å—Ç: {p.quest.name}\nüé´ –ü—Ä–æ–º–æ–∫–æ–¥: {p.promo_code.code}\n\n"

    await message.answer(text)

async def handle_photo(message: types.Message):
    from django.conf import settings

    user = await get_user(message.from_user.id)
    quest = await get_available_quest(user)

    if not quest:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞.")
        return

    file_id = message.photo[-1].file_id
    progress = await create_progress(user, quest, file_id)

    await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")

    await message.bot.send_photo(
        chat_id=settings.ADMIN_GROUP_ID,
        photo=file_id,
        caption=(
            f"–ù–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name}\n"
            f"üéØ –ö–≤–µ—Å—Ç: {quest.name}\n"
            f"üÜî ID –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {progress.id}\n\n"
            f"/approve {progress.id}\n/reject {progress.id} –ø—Ä–∏—á–∏–Ω–∞"
        )
    )
